version: "3.7"

networks:
  # explicitly setting up a docker virutal network for the serverpod services
  # by default, a network is implicitly created for each compose file
  # this makes it easier to connect to any other docker containers,
  # i.e. when using a separate docker compose to setup grafana, prometheus, etc.
  serverpod-network:
    name: serverpod-network
    driver: bridge

services:
  traefik:
    restart: on-failure
    image: traefik:v2.3
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.myresolver.acme.tlschallenge=true"
      - "--certificatesresolvers.myresolver.acme.email=damian_and_paul@examplepod.com"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
      - "./letsencrypt:/letsencrypt"
    depends_on:
      - postgres
      - serverpod
    networks:
      - serverpod-network

  postgres:
    restart: on-failure
    image: postgres:14.1
    labels:
      - "traefik.enable=false" # We typically don't expose databases externally via HTTP
    ports:
      - "5432:5432" # You should have a firewall in place that DOES NOT allow acces from the internet on this port. However on the host machine, we need access to it.
    environment:
      POSTGRES_USER: postgres
      POSTGRES_DB: projectname
      POSTGRES_PASSWORD: $DATABASE_PASSWORD_PRODUCTION
    volumes:
      - projectname_data:/var/lib/postgresql/data
    networks:
      - serverpod-network

  serverpod:
    restart: on-failure
    image: ghcr.io/${GHCR_ORG}/projectname_server:latest
    command:
      [
        "--mode",
        "production",
        "--server-id",
        "default",
        "--logging",
        "normal",
        "--role",
        "monolith",
        "--apply-migrations",
      ]
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`api.examplepod.com`)"
      - "traefik.http.routers.api.entrypoints=websecure"
      - "traefik.http.routers.api.service=api-service"
      - "traefik.http.routers.api.tls.certresolver=myresolver"
      - "traefik.http.services.api-service.loadbalancer.server.port=8080"

      - "traefik.http.routers.insights.rule=Host(`insights.examplepod.com`)"
      - "traefik.http.routers.insights.entrypoints=websecure"
      - "traefik.http.routers.insights.service=insights-service"
      - "traefik.http.routers.insights.tls.certresolver=myresolver"
      - "traefik.http.services.insights-service.loadbalancer.server.port=8081"

      - "traefik.http.routers.web.rule=Host(`web.examplepod.com`)"
      - "traefik.http.routers.web.entrypoints=websecure"
      - "traefik.http.routers.web.service=web-service"
      - "traefik.http.routers.web.tls.certresolver=myresolver"
      - "traefik.http.services.web-service.loadbalancer.server.port=8082"
    depends_on:
      - postgres
    networks:
      - serverpod-network

volumes:
  projectname_data:
